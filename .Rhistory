* For every tackle a player makes, his expected number of shots increases by $e^-0.0314 = 0.9690$
* For every pass a player makes, his expected number of shots increases by $e^-0.000159 = 0.9998$
### Part B
Calculate the leverages for the current model. Report which player has the highest leverage and suggest why this might be so. Make an appropriate plot of the leverages and comment on whether any leverage is exceptional.
```{r}
# Compute leverages, maximum leverage, and look at first six leverages
leverages <- hatvalues(fit1)
topLev <- which(leverages == max(leverages))
head(leverages)
# Use topLev to label the maximum leverage
plot(leverages, type = "h")
numerics <- c("Shots", "Tackles", "Passes", "Time")
# Means and maximums of numeric predictors
colMeans <- colMeans(worldcup[, numerics])
colMaxs <- apply(worldcup[, numerics], MARGIN = 2, FUN = max)
colMins <- apply(worldcup[, numerics], MARGIN = 2, FUN = min)
# Forlan's statistics
forlanStats <- worldcup["Forlan", numerics]
```
```{r, echo = F}
print(paste(names(colMeans), collapse="  "))
print(paste(c("Averages:", round(colMeans, 2)), collapse = "   "))
print(paste(c("Maximums:", colMaxs), collapse = "      "))
print(paste(c("Minumums:", colMins), collapse = "      "))
print(paste(c("Forlan's:", forlanStats), collapse = "      "))
```
print(paste(c("Averages:", round(colMeans, 2)), collapse = "   "))
print(paste(c("Maximums:", colMaxs), collapse = "      "))
print(paste(c("Minumums:", colMins), collapse = "       "))
print(paste(c("Forlan's:", forlanStats), collapse = "      "))
print(paste(names(colMeans), collapse="  "))
print(paste(c("Averages:", round(colMeans, 2)), collapse = "   "))
print(paste(c("Maximums:", colMaxs), collapse = "      "))
print(paste(c("Minumums:", colMins), collapse = "       "))
print(paste(c("Xavi's:", xaviStats), collapse = "       "))
```
ggplot(data = worldcup) +
geom_point(mapping = aes(x = TacklesPerGame, y = predict(fit1, type = "link"))) +
ggtitle("Linearized response vs Tackles/Game")
worldcup$Games <- worldcup$Time/90
worldcup$ShotsPerGame <- worldcup$Shots / worldcup$Games
worldcup$TacklesPerGame <- worldcup$Tackles / worldcup$Games
ggplot(data = worldcup) +
geom_point(mapping = aes(x = TacklesPerGame, y = predict(fit1, type = "link"))) +
ggtitle("Linearized response vs Tackles/Game")
ggplot(data = worldcup) +
geom_point(mapping = aes(x = TacklesPerGame, y = ShotsPerGame)) +
ggtitle("Per Game: Shots vs Tackles")
ggplot(data = worldcup) +
geom_point(mapping = aes(x = Tackles, y = Shots)) +
ggtitle("Shots vs Tackles")
ggplot(data = worldcup) +
geom_point(mapping = aes(x = TacklesPerGame, y = predict(fit1, type = "link"))) +
ggtitle("Linearized response vs Tackles/Game")
ggplot(data = worldcup) +
geom_point(mapping = aes(x = TacklesPerGame, y = ShotsPerGame)) +
ggtitle("Per Game: Shots vs Tackles")
ggplot(data = worldcup) +
geom_point(mapping = aes(x = TacklesPerGame, y = predict(fit1, type = "link"))) +
ggtitle("Linearized response vs Tackles/Game")
coef(fit1)
coef(fit1)$Tackles
coef(fit1)["Tackles"]
mu <- predict(fit1, type="response")
u <- (worldcup$Shots - mu)/mu + coef(fit1)["Tackles"]*worldcup$Tackles
plot(y = u, x = worldcup$Tackles)
ggplot() +
geom_point(aes(x = worldcup$Tackles, y = u)) +
ggtitle("Partial Residual Plot") +
xlab("Tackles") +
ylab("Partial Residuals")
ggplot() +
geom_point(aes(x = worldcup$Tackles, y = u)) +
ggtitle("Partial Residual Plot") +
xlab("Tackles") +
ylab("Partial Residuals")
a <- read.csv("Desktop/Java/processing/wikiViz/hope copy.csv")
head(a)
dim(a)
table(a$level)
names(a)
head(a[, !(names(a) %in% c("text"))])
summary(a)
head(a[, !(names(a) %in% c("parent"))])
b <- c("nWords", "imgURL", "parent", "nLinks", "nImg", "nChar", )
b <- c("nWords", "imgURL", "parent", "nLinks", "nImg", "nChar", "extension", "level", "text", "title")
names(a) <- b
head(a[, !(names(a) %in% c("text"))])
head(a[, !(names(a) %in% c("parent"))])
b <- c("nWords", "imgURL", "parent", "nLinks", "nImg", "nChar", "extension", "text", "level", "title")
names(a) <- b
head(a[, !(names(a) %in% c("parent"))])
head(a[, !(names(a) %in% c("text"))])
tabe(a$level)
table(a$level)
setwd("Desktop/R/survival_Analysis")
library(ggplot2)
library(plyr)
library(dplyr)
library(survival)
# From: https://www.r-statistics.com/2013/07/creating-good-looking-survival-curves-the-ggsurv-function/
ggsurv <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
cens.col = 'red', lty.est = 1, lty.ci = 2,
cens.shape = 3, back.white = F, xlab = 'Time',
ylab = 'Survival', main = ''){
library(ggplot2)
strata <- ifelse(is.null(s$strata) ==T, 1, length(s$strata))
stopifnot(length(surv.col) == 1 | length(surv.col) == strata)
stopifnot(length(lty.est) == 1 | length(lty.est) == strata)
ggsurv.s <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
cens.col = 'red', lty.est = 1, lty.ci = 2,
cens.shape = 3, back.white = F, xlab = 'Time',
ylab = 'Survival', main = ''){
dat <- data.frame(time = c(0, s$time),
surv = c(1, s$surv),
up = c(1, s$upper),
low = c(1, s$lower),
cens = c(0, s$n.censor))
dat.cens <- subset(dat, cens != 0)
col <- ifelse(surv.col == 'gg.def', 'black', surv.col)
pl <- ggplot(dat, aes(x = time, y = surv)) +
xlab(xlab) + ylab(ylab) + ggtitle(main) +
geom_step(col = col, lty = lty.est)
pl <- if(CI == T | CI == 'def') {
pl + geom_step(aes(y = up), color = col, lty = lty.ci) +
geom_step(aes(y = low), color = col, lty = lty.ci)
} else (pl)
pl <- if(plot.cens == T & length(dat.cens) > 0){
pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
col = cens.col)
} else if (plot.cens == T & length(dat.cens) == 0){
stop ('There are no censored observations')
} else(pl)
pl <- if(back.white == T) {pl + theme_bw()
} else (pl)
pl
}
ggsurv.m <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
cens.col = 'red', lty.est = 1, lty.ci = 2,
cens.shape = 3, back.white = F, xlab = 'Time',
ylab = 'Survival', main = '') {
n <- s$strata
groups <- factor(unlist(strsplit(names
(s$strata), '='))[seq(2, 2*strata, by = 2)])
gr.name <-  unlist(strsplit(names(s$strata), '='))[1]
gr.df <- vector('list', strata)
ind <- vector('list', strata)
n.ind <- c(0,n); n.ind <- cumsum(n.ind)
for(i in 1:strata) ind[[i]] <- (n.ind[i]+1):n.ind[i+1]
for(i in 1:strata){
gr.df[[i]] <- data.frame(
time = c(0, s$time[ ind[[i]] ]),
surv = c(1, s$surv[ ind[[i]] ]),
up = c(1, s$upper[ ind[[i]] ]),
low = c(1, s$lower[ ind[[i]] ]),
cens = c(0, s$n.censor[ ind[[i]] ]),
group = rep(groups[i], n[i] + 1))
}
dat <- do.call(rbind, gr.df)
dat.cens <- subset(dat, cens != 0)
pl <- ggplot(dat, aes(x = time, y = surv, group = group)) +
xlab(xlab) + ylab(ylab) + ggtitle(main) +
geom_step(aes(col = group, lty = group))
col <- if(length(surv.col == 1)){
scale_colour_manual(name = gr.name, values = rep(surv.col, strata))
} else{
scale_colour_manual(name = gr.name, values = surv.col)
}
pl <- if(surv.col[1] != 'gg.def'){
pl + col
} else {pl + scale_colour_discrete(name = gr.name)}
line <- if(length(lty.est) == 1){
scale_linetype_manual(name = gr.name, values = rep(lty.est, strata))
} else {scale_linetype_manual(name = gr.name, values = lty.est)}
pl <- pl + line
pl <- if(CI == T) {
if(length(surv.col) > 1 && length(lty.est) > 1){
stop('Either surv.col or lty.est should be of length 1 in order
to plot 95% CI with multiple strata')
}else if((length(surv.col) > 1 | surv.col == 'gg.def')[1]){
pl + geom_step(aes(y = up, color = group), lty = lty.ci) +
geom_step(aes(y = low, color = group), lty = lty.ci)
} else{pl +  geom_step(aes(y = up, lty = group), col = surv.col) +
geom_step(aes(y = low,lty = group), col = surv.col)}
} else {pl}
pl <- if(plot.cens == T & length(dat.cens) > 0){
pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
col = cens.col)
} else if (plot.cens == T & length(dat.cens) == 0){
stop ('There are no censored observations')
} else(pl)
pl <- if(back.white == T) {pl + theme_bw()
} else (pl)
pl
}
pl <- if(strata == 1) {ggsurv.s(s, CI , plot.cens, surv.col ,
cens.col, lty.est, lty.ci,
cens.shape, back.white, xlab,
ylab, main)
} else {ggsurv.m(s, CI, plot.cens, surv.col ,
cens.col, lty.est, lty.ci,
cens.shape, back.white, xlab,
ylab, main)}
pl
}
#
##
### Load and edit data
##
#
transitioned <- read.csv(file="transitioned.csv", header=T)
censored <- read.csv(file="censored.csv", header=T)
full <- rbind(transitioned, censored)
# Make "event" column in full dataframe. 0 -> censored, 1 -> transitioned
full$event <- as.factor(ifelse(full$UNQID_tmp %in% transitioned$UNQID_tmp, 1, 0))
full$duration <- full$DURATION
#
##
###
#### Sourcing Scripts
###
##
#
# Example:
# source("someRFile.R")
# This script (explore.R) will then run everything in someRFile.R
source("tables.R")
source("jasonExplore.R")
surv1 <- Surv(full$duration, event=full$event)
basicKM <- survfit(surv1 ~ 1)
kmPlot1 <- ggsurv(surv1)
str(surv1)
ggsurv(alcKM, plot.cens=F) +
ggtitle("KM Estimates Statified by Alcohol Consumption") +
scale_fill_discrete(name="New Legend Title")
source("johnExplore.R")
#
##
### Load libraries and define functions
##
#
library(ggplot2)
library(plyr)
library(dplyr)
library(survival)
# From: https://www.r-statistics.com/2013/07/creating-good-looking-survival-curves-the-ggsurv-function/
ggsurv <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
cens.col = 'red', lty.est = 1, lty.ci = 2,
cens.shape = 3, back.white = F, xlab = 'Time',
ylab = 'Survival', main = ''){
library(ggplot2)
strata <- ifelse(is.null(s$strata) ==T, 1, length(s$strata))
stopifnot(length(surv.col) == 1 | length(surv.col) == strata)
stopifnot(length(lty.est) == 1 | length(lty.est) == strata)
ggsurv.s <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
cens.col = 'red', lty.est = 1, lty.ci = 2,
cens.shape = 3, back.white = F, xlab = 'Time',
ylab = 'Survival', main = ''){
dat <- data.frame(time = c(0, s$time),
surv = c(1, s$surv),
up = c(1, s$upper),
low = c(1, s$lower),
cens = c(0, s$n.censor))
dat.cens <- subset(dat, cens != 0)
col <- ifelse(surv.col == 'gg.def', 'black', surv.col)
pl <- ggplot(dat, aes(x = time, y = surv)) +
xlab(xlab) + ylab(ylab) + ggtitle(main) +
geom_step(col = col, lty = lty.est)
pl <- if(CI == T | CI == 'def') {
pl + geom_step(aes(y = up), color = col, lty = lty.ci) +
geom_step(aes(y = low), color = col, lty = lty.ci)
} else (pl)
pl <- if(plot.cens == T & length(dat.cens) > 0){
pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
col = cens.col)
} else if (plot.cens == T & length(dat.cens) == 0){
stop ('There are no censored observations')
} else(pl)
pl <- if(back.white == T) {pl + theme_bw()
} else (pl)
pl
}
ggsurv.m <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
cens.col = 'red', lty.est = 1, lty.ci = 2,
cens.shape = 3, back.white = F, xlab = 'Time',
ylab = 'Survival', main = '') {
n <- s$strata
groups <- factor(unlist(strsplit(names
(s$strata), '='))[seq(2, 2*strata, by = 2)])
gr.name <-  unlist(strsplit(names(s$strata), '='))[1]
gr.df <- vector('list', strata)
ind <- vector('list', strata)
n.ind <- c(0,n); n.ind <- cumsum(n.ind)
for(i in 1:strata) ind[[i]] <- (n.ind[i]+1):n.ind[i+1]
for(i in 1:strata){
gr.df[[i]] <- data.frame(
time = c(0, s$time[ ind[[i]] ]),
surv = c(1, s$surv[ ind[[i]] ]),
up = c(1, s$upper[ ind[[i]] ]),
low = c(1, s$lower[ ind[[i]] ]),
cens = c(0, s$n.censor[ ind[[i]] ]),
group = rep(groups[i], n[i] + 1))
}
dat <- do.call(rbind, gr.df)
dat.cens <- subset(dat, cens != 0)
pl <- ggplot(dat, aes(x = time, y = surv, group = group)) +
xlab(xlab) + ylab(ylab) + ggtitle(main) +
geom_step(aes(col = group, lty = group))
col <- if(length(surv.col == 1)){
scale_colour_manual(name = gr.name, values = rep(surv.col, strata))
} else{
scale_colour_manual(name = gr.name, values = surv.col)
}
pl <- if(surv.col[1] != 'gg.def'){
pl + col
} else {pl + scale_colour_discrete(name = gr.name)}
line <- if(length(lty.est) == 1){
scale_linetype_manual(name = gr.name, values = rep(lty.est, strata))
} else {scale_linetype_manual(name = gr.name, values = lty.est)}
pl <- pl + line
pl <- if(CI == T) {
if(length(surv.col) > 1 && length(lty.est) > 1){
stop('Either surv.col or lty.est should be of length 1 in order
to plot 95% CI with multiple strata')
}else if((length(surv.col) > 1 | surv.col == 'gg.def')[1]){
pl + geom_step(aes(y = up, color = group), lty = lty.ci) +
geom_step(aes(y = low, color = group), lty = lty.ci)
} else{pl +  geom_step(aes(y = up, lty = group), col = surv.col) +
geom_step(aes(y = low,lty = group), col = surv.col)}
} else {pl}
pl <- if(plot.cens == T & length(dat.cens) > 0){
pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
col = cens.col)
} else if (plot.cens == T & length(dat.cens) == 0){
stop ('There are no censored observations')
} else(pl)
pl <- if(back.white == T) {pl + theme_bw()
} else (pl)
pl
}
pl <- if(strata == 1) {ggsurv.s(s, CI , plot.cens, surv.col ,
cens.col, lty.est, lty.ci,
cens.shape, back.white, xlab,
ylab, main)
} else {ggsurv.m(s, CI, plot.cens, surv.col ,
cens.col, lty.est, lty.ci,
cens.shape, back.white, xlab,
ylab, main)}
pl
}
#
##
### Load and edit data
##
#
transitioned <- read.csv(file="transitioned.csv", header=T)
censored <- read.csv(file="censored.csv", header=T)
full <- rbind(transitioned, censored)
full$Partial_code_ff <- as.numeric(full$Partial_code_ff)    # Coerce the event variable to numeric
# Need to remove BMI stuff
bmiQuants <- quantile(full$BMInew, seq(0, 1, 0.25))
full$bmiCat <- cut(bmiQuants, unique(bmiQuants), include.lowest=TRUE)
#
##
###
#### Sourcing Scripts
###
##
#
# Example:
# source("someRFile.R")
# This script (explore.R) will then run everything in someRFile.R
source("tables.R")
source("jasonExplore.R")
source("johnExplore.R")
full$new_bmi <- ifelse(full$BMInew > 100 | full$BMInew < 15, NA, full$BMInew)
bmiQuants <- quantile(full$BMInew, seq(0, 1, 0.25))
full$bmiCat <- cut(bmiQuants, unique(bmiQuants), include.lowest=TRUE)
a$out
full2 <- full
full2 <- na.omit(ifelse(full2$BMInew > 100 | full2$BMInew < 15, NA, full2$BMInew))
bmiQuants <- quantile(full2$BMInew, seq(0, 1, 0.25))
full2$bmiCat <- cut(bmiQuants, unique(bmiQuants), include.lowest=TRUE)
full2 <- full
full2
full2 <- full
full2 <- na.omit(ifelse(full2$BMInew > 100 | full2$BMInew < 15, NA, full2$BMInew))
bmiQuants <- quantile(full2$BMInew, seq(0, 1, 0.25))
full2
full2 <- full
full2$BMInew <- ifelse(full2$BMInew > 100 | full2$BMInew < 15, NA, full2$BMInew)
full2 <- full
full2$BMInew <- ifelse(full2$BMInew > 100 | full2$BMInew < 15, NA, full2$BMInew)
full2 <- na.omit(full2$BMInew)
bmiQuants <- quantile(full2$BMInew, seq(0, 1, 0.25))
full2 <- full
full2$BMInew <- ifelse(full2$BMInew > 100 | full2$BMInew < 15, NA, full2$BMInew)
full2 <- na.omit(full2)
bmiQuants <- quantile(full2$BMInew, seq(0, 1, 0.25))
full2$bmiCat <- cut(bmiQuants, unique(bmiQuants), include.lowest=TRUE)
full2 <- full
full2$BMInew <- ifelse(full2$BMInew > 100 | full2$BMInew < 15, NA, full2$BMInew)
full2 <- na.omit(full2)
bmiQuants <- quantile(full2$BMInew, seq(0, 1, 0.25))
bmiQuants
cut(bmiQuants, unique(bmiQuants), include.lowest=TRUE)
full2 <- full
full2$BMInew <- ifelse(full2$BMInew > 100 | full2$BMInew < 15, NA, full2$BMInew)
full2 <- na.omit(full2)
bmiQuants <- quantile(full2$BMInew, seq(0, 1, 0.25))
full2$bmiCat <- cut(bmiQuants, unique(bmiQuants), include.lowest=TRUE)
quantile(full2$BMInew, seq(0, 1, 0.25))
full2$BMInew
full2$bmiCat <- cut(full2$BMInew, unique(bmiQuants), include.lowest=TRUE)
full2$bmiCat
table(full2$bmiCat)
bmiKM <- survfit(survObect ~ full2$bmiCat)
survObject <- Surv(full$DURATION, event=full$Partial_code_ff)
bmiKM <- survfit(survObect ~ full2$bmiCat)
survObject <- Surv(full$DURATION, event=full$Partial_code_ff)
bmiKM <- survfit(survObect ~ full2$bmiCat)
survObject <- Surv(full$DURATION, event=full$Partial_code_ff)
bmiKM <- survfit(survObect ~ full2$bmiCat)
alcKM <- survfit(survObject ~ full$alcohol)
survObject <- Surv(full$DURATION, event=full$Partial_code_ff)
survObject2 <- Surv(full2$DURATION, event=full$Partial_code_ff)
bmiKM <- survfit(survObject2 ~ full2$bmiCat)
alcKM <- survfit(survObject ~ full$alcohol)
survObject <- Surv(full$DURATION, event=full$Partial_code_ff)
survObject2 <- Surv(full2$DURATION, event=full2$Partial_code_ff)
bmiKM <- survfit(survObject2 ~ full2$bmiCat)
alcKM <- survfit(survObject ~ full$alcohol)
ggsurv(bmiKM, plot.cens=F) +
ggtitle("Stratified by BMI Range")
class(bmiQuants)
class(full2$bmiCat)
unique(levels(full2$bmiCat))
as.int(unique(levels(full2$bmiCat)))
as.numeric(unique(levels(full2$bmiCat)))
ggsurv(bmiKM, plot.cens=F) +
ggtitle("Stratified by BMI Range")
full2$bmiCat <- factor(full2$bmiCat, unique(levels(full2$bmiCat))[1,2,3,4])
unique(levels(full2$bmiCat))
unique(levels(full2$bmiCat))[1]
full2$bmiCat <- factor(full2$bmiCat, unique(levels(full2$bmiCat))[c(1,2,3,4)])
ggsurv(bmiKM, plot.cens=F) +
ggtitle("Stratified by BMI Range")
full2$bmiCat <- factor(full2$bmiCat, unique(levels(full2$bmiCat))[c(1,2,3,4)], labels=c("a", "b", "c", "d"))
# Need to remove BMI outliers
full2 <- full
full2$BMInew <- ifelse(full2$BMInew > 100 | full2$BMInew < 15, NA, full2$BMInew)
full2 <- na.omit(full2)
bmiQuants <- quantile(full2$BMInew, seq(0, 1, 0.25))
full2$bmiCat <- cut(full2$BMInew, unique(bmiQuants), include.lowest=TRUE)
full2$bmiCat <- factor(full2$bmiCat, unique(levels(full2$bmiCat))[c(1,2,3,4)], labels=c("a", "b", "c", "d"))
ggsurv(bmiKM, plot.cens=F) +
ggtitle("Stratified by BMI Range")
# Exploratory KM Estimates
survObject <- Surv(full$DURATION, event=full$Partial_code_ff)
survObject2 <- Surv(full2$DURATION, event=full2$Partial_code_ff)
bmiKM <- survfit(survObject2 ~ full2$bmiCat)
alcKM <- survfit(survObject ~ full$alcohol)
ggsurv(alcKM, plot.cens=F) +
ggtitle("KM Estimates Statified by Alcohol Consumption") +
scale_fill_discrete(name="New Legend Title")
ggsurv(bmiKM, plot.cens=F) +
ggtitle("Stratified by BMI Range")
# Need to remove BMI outliers
full2 <- full
full2$BMInew <- ifelse(full2$BMInew > 100 | full2$BMInew < 15, NA, full2$BMInew)
full2 <- na.omit(full2)
bmiQuants <- quantile(full2$BMInew, seq(0, 1, 0.25))
full2$bmiCat <- cut(full2$BMInew, unique(bmiQuants), include.lowest=TRUE)
full2$bmiCat <- factor(full2$bmiCat, unique(levels(full2$bmiCat))[c(1,2,3,4)], labels=c("Low", "Medium", "High", "Obese"))
# Exploratory KM Estimates
survObject <- Surv(full$DURATION, event=full$Partial_code_ff)
survObject2 <- Surv(full2$DURATION, event=full2$Partial_code_ff)
bmiKM <- survfit(survObject2 ~ full2$bmiCat)
alcKM <- survfit(survObject ~ full$alcohol)
ggsurv(alcKM, plot.cens=F) +
ggtitle("KM Estimates Statified by Alcohol Consumption") +
scale_fill_discrete(name="New Legend Title")
ggsurv(bmiKM, plot.cens=F) +
ggtitle("Stratified by BMI Range")
ggsurv(bmiKM, plot.cens=T) +
ggtitle("Stratified by BMI Range")
cigKM <- survfit(survObject ~ full$alcohol)
ggsurv(cigKM, plot.cens = F) +
ggtitle("Stratified by Cigarette Usage")
ggsurv(alcKM, plot.cens=F) +
ggtitle("KM Estimates Statified by Alcohol Consumption") +
scale_fill_discrete(name="New Legend Title")
ggsurv(cigKM, plot.cens = F) +
ggtitle("Stratified by Cigarette Usage")
ggsurv(alcKM, plot.cens=F) +
ggtitle("KM Estimates Statified by Alcohol Consumption") +
scale_fill_discrete(name="New Legend Title")
ggsurv(bmiKM, plot.cens=F) +
ggtitle("Stratified by BMI Range")
ggsurv(cigKM, plot.cens = F) +
ggtitle("Stratified by Cigarette Usage")
ggsurv(cigKM, plot.cens = F) +
ggtitle("Stratified by Cigarette Usage")
ggsurv(alcKM, plot.cens=F) +
ggtitle("KM Estimates Statified by Alcohol Consumption") +
scale_fill_discrete(name="New Legend Title")
ggsurv(alcKM, plot.cens=F) +
ggtitle("KM Estimates Statified by Alcohol Consumption") +
scale_fill_discrete(name="New Legend Title")
cigKM <- survfit(survObject ~ full$cigar)
ggsurv(cigKM, plot.cens = F) +
ggtitle("Stratified by Cigarette Usage")
