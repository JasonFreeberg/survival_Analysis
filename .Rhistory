#
##
### Master file for Exploratory Analysis
##
#
#
##
### Load libraries and define functions
##
#
library(ggplot2)
library(plyr)
library(dplyr)
library(survival)
# From: https://www.r-statistics.com/2013/07/creating-good-looking-survival-curves-the-ggsurv-function/
ggsurv <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
cens.col = 'red', lty.est = 1, lty.ci = 2,
cens.shape = 3, back.white = F, xlab = 'Time',
ylab = 'Survival', main = ''){
library(ggplot2)
strata <- ifelse(is.null(s$strata) ==T, 1, length(s$strata))
stopifnot(length(surv.col) == 1 | length(surv.col) == strata)
stopifnot(length(lty.est) == 1 | length(lty.est) == strata)
ggsurv.s <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
cens.col = 'red', lty.est = 1, lty.ci = 2,
cens.shape = 3, back.white = F, xlab = 'Time',
ylab = 'Survival', main = ''){
dat <- data.frame(time = c(0, s$time),
surv = c(1, s$surv),
up = c(1, s$upper),
low = c(1, s$lower),
cens = c(0, s$n.censor))
dat.cens <- subset(dat, cens != 0)
col <- ifelse(surv.col == 'gg.def', 'black', surv.col)
pl <- ggplot(dat, aes(x = time, y = surv)) +
xlab(xlab) + ylab(ylab) + ggtitle(main) +
geom_step(col = col, lty = lty.est)
pl <- if(CI == T | CI == 'def') {
pl + geom_step(aes(y = up), color = col, lty = lty.ci) +
geom_step(aes(y = low), color = col, lty = lty.ci)
} else (pl)
pl <- if(plot.cens == T & length(dat.cens) > 0){
pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
col = cens.col)
} else if (plot.cens == T & length(dat.cens) == 0){
stop ('There are no censored observations')
} else(pl)
pl <- if(back.white == T) {pl + theme_bw()
} else (pl)
pl
}
ggsurv.m <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
cens.col = 'red', lty.est = 1, lty.ci = 2,
cens.shape = 3, back.white = F, xlab = 'Time',
ylab = 'Survival', main = '') {
n <- s$strata
groups <- factor(unlist(strsplit(names
(s$strata), '='))[seq(2, 2*strata, by = 2)])
gr.name <-  unlist(strsplit(names(s$strata), '='))[1]
gr.df <- vector('list', strata)
ind <- vector('list', strata)
n.ind <- c(0,n); n.ind <- cumsum(n.ind)
for(i in 1:strata) ind[[i]] <- (n.ind[i]+1):n.ind[i+1]
for(i in 1:strata){
gr.df[[i]] <- data.frame(
time = c(0, s$time[ ind[[i]] ]),
surv = c(1, s$surv[ ind[[i]] ]),
up = c(1, s$upper[ ind[[i]] ]),
low = c(1, s$lower[ ind[[i]] ]),
cens = c(0, s$n.censor[ ind[[i]] ]),
group = rep(groups[i], n[i] + 1))
}
dat <- do.call(rbind, gr.df)
dat.cens <- subset(dat, cens != 0)
pl <- ggplot(dat, aes(x = time, y = surv, group = group)) +
xlab(xlab) + ylab(ylab) + ggtitle(main) +
geom_step(aes(col = group, lty = group))
col <- if(length(surv.col == 1)){
scale_colour_manual(name = gr.name, values = rep(surv.col, strata))
} else{
scale_colour_manual(name = gr.name, values = surv.col)
}
pl <- if(surv.col[1] != 'gg.def'){
pl + col
} else {pl + scale_colour_discrete(name = gr.name)}
line <- if(length(lty.est) == 1){
scale_linetype_manual(name = gr.name, values = rep(lty.est, strata))
} else {scale_linetype_manual(name = gr.name, values = lty.est)}
pl <- pl + line
pl <- if(CI == T) {
if(length(surv.col) > 1 && length(lty.est) > 1){
stop('Either surv.col or lty.est should be of length 1 in order
to plot 95% CI with multiple strata')
}else if((length(surv.col) > 1 | surv.col == 'gg.def')[1]){
pl + geom_step(aes(y = up, color = group), lty = lty.ci) +
geom_step(aes(y = low, color = group), lty = lty.ci)
} else{pl +  geom_step(aes(y = up, lty = group), col = surv.col) +
geom_step(aes(y = low,lty = group), col = surv.col)}
} else {pl}
pl <- if(plot.cens == T & length(dat.cens) > 0){
pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
col = cens.col)
} else if (plot.cens == T & length(dat.cens) == 0){
stop ('There are no censored observations')
} else(pl)
pl <- if(back.white == T) {pl + theme_bw()
} else (pl)
pl
}
pl <- if(strata == 1) {ggsurv.s(s, CI , plot.cens, surv.col ,
cens.col, lty.est, lty.ci,
cens.shape, back.white, xlab,
ylab, main)
} else {ggsurv.m(s, CI, plot.cens, surv.col ,
cens.col, lty.est, lty.ci,
cens.shape, back.white, xlab,
ylab, main)}
pl
}
#
##
### Load and edit data
##
#
transitioned <- read.csv(file="transitioned.csv", header=T)
censored <- read.csv(file="censored.csv", header=T)
full <- rbind(transitioned, censored)
# Make "event" column in full dataframe. 0 -> censored, 1 -> transitioned
full$event <- as.factor(ifelse(full$UNQID_tmp %in% transitioned$UNQID_tmp, 1, 0))
full$duration <- full$DURATION
#
##
###
#### Sourcing Scripts
###
##
#
# Example:
# source("someRFile.R")
# This script (explore.R) will then run everything in someRFile.R
source("tables.R")
source("jasonExplore.R")
plot(basicKM)
surv1 <- Surv(full$duration, event=full$event)
basicKM <- survfit(surv1 ~ 1)
plot(basicKM)
ggsurv(surv1)
ggsurv(basicKM)
str(basicKM)
basicKM <- survfit(surv1 ~ full$event)
basicKM
plot(basicKM)
surv1 <- Surv(full$duration, event=full$event)
basicKM <- survfit(surv1 ~ full$sex)
ggsurv(basicKM)
surv1 <- Surv(full$duration, event=full$event)
basicKM <- survfit(surv1 ~ 1)
ggsurv(basicKM)
basicKM <- survfit(surv1 ~ full$%alcohol)
surv1 <- Surv(full$duration, event=full$event)
basicKM <- survfit(surv1 ~ full$alcohol)
ggsurv(basicKM)
View(full)
hist(full$duration)
table(full$duration)
table(round(full$duration, 3)
)
table(round(full$duration, 1000))
oneDay <- full[full$duration > 1, ]
oneDay <- full[full$duration > 1, ]
surv1 <- Surv(duration, event=event, data=oneDay)
basicKM <- survfit(surv1 ~ 1)
oneDay <- full[full$duration > 1, ]
surv1 <- Surv(duration, event=event, data=oneDay)
oneDay <- full[full$duration > 1, ]
surv1 <- Surv(oneDay$duration, event=oneDay$event)
basicKM <- survfit(surv1 ~ 1)
ggsurv(basicKM)
plot(basicKM)
plot(basicKM)
plot(basicKM)
oneDay <- full[full$duration > 0, ]
surv1 <- Surv(oneDay$duration, event=oneDay$event)
basicKM <- survfit(surv1 ~ 1)
plot(basicKM)
basicKM <- survfit(Surv(time=duration, event=event, data=full) ~ 1)
basicKM <- survfit(Surv(time=full$duration, event=full$event) ~ 1)
plot(basicKM)
basicKM
nrow(full)
glimpse(full)
full$duration <- as.double(full$duration)
basicKM <- survfit(Surv(time=full$duration, event=full$event) ~ 1)
plot(basicKM)
basicKM <- survfit(Surv(time=full$duration, event=full$event) ~ full$alcohol)
plot(basicKM)
basicKM
ggsurv(basicKM)
longerTimes <- full[full$duration > 4, ]
basicKM <- survfit(Surv(time=full$duration, event=full$event) ~ full$alcohol)
longerTimes <- full[full$duration > 4, ]
basicKM <- survfit(Surv(time=longerTimes$duration, event=longerTimes$event) ~ longerTimes$alcohol)
plot(basicKM)
ggsurv(basicKM)
ggsurv(basicKM)
full$event <- ifelse(full$UNQID_tmp %in% transitioned$UNQID_tmp, 1, 2)
longerTimes <- full[full$duration > 4, ]
basicKM <- survfit(Surv(time=longerTimes$duration, event=longerTimes$event) ~ longerTimes$alcohol)
plot(basicKM)
basicKM
full$Partial_code_ff <- as.numeric(full$Partial_code_ff)
survObject <- Surv(full$DURATION, event=full$Partial_code_ff)
basicKM <- survfit(Surv(time=full$duration, event=full$event) ~ full$alcohol)
plot(basicKM)
basicKM
bmiScaled <- full$BMInew/max(full$BMInew)
max(bmiScaled)
bmiScaled <- full$BMInew/max(full$BMInew)
bmiQuants <- quantile(bmiScaled, seq(0, 1, 0.25))
bmiQuants
cut(x, unique(bmiQuants), include.lowest=TRUE)
ass <- cut(bmiScaled, unique(bmiQuants), include.lowest=TRUE)
ass
ass[8]
full$bmiCat <- cut(bmiScaled, unique(bmiQuants), include.lowest=TRUE)
head(full)
bmiQuants <- quantile(full$BMInew, seq(0, 1, 0.25))
bmiQuants <- quantile(full$BMInew, seq(0, 1, 0.25))
full$bmiCat <- cut(bmiQuants, unique(bmiQuants), include.lowest=TRUE)
head(full)
alcKM <- survfit(survObject ~ full$alcohol)
ggsurv(alcKM)
ggsurv(alcKM, plot.cens = F)
ggsurv(alcKM, plot.cens = F) +
ggtitle("KM Estimates Statified by Alcohol Consumption")
library(ggplot2)
library(plyr)
library(dplyr)
library(survival)
# From: https://www.r-statistics.com/2013/07/creating-good-looking-survival-curves-the-ggsurv-function/
ggsurv <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
cens.col = 'red', lty.est = 1, lty.ci = 2,
cens.shape = 3, back.white = F, xlab = 'Time',
ylab = 'Survival', main = ''){
library(ggplot2)
strata <- ifelse(is.null(s$strata) ==T, 1, length(s$strata))
stopifnot(length(surv.col) == 1 | length(surv.col) == strata)
stopifnot(length(lty.est) == 1 | length(lty.est) == strata)
ggsurv.s <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
cens.col = 'red', lty.est = 1, lty.ci = 2,
cens.shape = 3, back.white = F, xlab = 'Time',
ylab = 'Survival', main = ''){
dat <- data.frame(time = c(0, s$time),
surv = c(1, s$surv),
up = c(1, s$upper),
low = c(1, s$lower),
cens = c(0, s$n.censor))
dat.cens <- subset(dat, cens != 0)
col <- ifelse(surv.col == 'gg.def', 'black', surv.col)
pl <- ggplot(dat, aes(x = time, y = surv)) +
xlab(xlab) + ylab(ylab) + ggtitle(main) +
geom_step(col = col, lty = lty.est)
pl <- if(CI == T | CI == 'def') {
pl + geom_step(aes(y = up), color = col, lty = lty.ci) +
geom_step(aes(y = low), color = col, lty = lty.ci)
} else (pl)
pl <- if(plot.cens == T & length(dat.cens) > 0){
pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
col = cens.col)
} else if (plot.cens == T & length(dat.cens) == 0){
stop ('There are no censored observations')
} else(pl)
pl <- if(back.white == T) {pl + theme_bw()
} else (pl)
pl
}
ggsurv.m <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
cens.col = 'red', lty.est = 1, lty.ci = 2,
cens.shape = 3, back.white = F, xlab = 'Time',
ylab = 'Survival', main = '') {
n <- s$strata
groups <- factor(unlist(strsplit(names
(s$strata), '='))[seq(2, 2*strata, by = 2)])
gr.name <-  unlist(strsplit(names(s$strata), '='))[1]
gr.df <- vector('list', strata)
ind <- vector('list', strata)
n.ind <- c(0,n); n.ind <- cumsum(n.ind)
for(i in 1:strata) ind[[i]] <- (n.ind[i]+1):n.ind[i+1]
for(i in 1:strata){
gr.df[[i]] <- data.frame(
time = c(0, s$time[ ind[[i]] ]),
surv = c(1, s$surv[ ind[[i]] ]),
up = c(1, s$upper[ ind[[i]] ]),
low = c(1, s$lower[ ind[[i]] ]),
cens = c(0, s$n.censor[ ind[[i]] ]),
group = rep(groups[i], n[i] + 1))
}
dat <- do.call(rbind, gr.df)
dat.cens <- subset(dat, cens != 0)
pl <- ggplot(dat, aes(x = time, y = surv, group = group)) +
xlab(xlab) + ylab(ylab) + ggtitle(main) +
geom_step(aes(col = group, lty = group))
col <- if(length(surv.col == 1)){
scale_colour_manual(name = gr.name, values = rep(surv.col, strata))
} else{
scale_colour_manual(name = gr.name, values = surv.col)
}
pl <- if(surv.col[1] != 'gg.def'){
pl + col
} else {pl + scale_colour_discrete(name = gr.name)}
line <- if(length(lty.est) == 1){
scale_linetype_manual(name = gr.name, values = rep(lty.est, strata))
} else {scale_linetype_manual(name = gr.name, values = lty.est)}
pl <- pl + line
pl <- if(CI == T) {
if(length(surv.col) > 1 && length(lty.est) > 1){
stop('Either surv.col or lty.est should be of length 1 in order
to plot 95% CI with multiple strata')
}else if((length(surv.col) > 1 | surv.col == 'gg.def')[1]){
pl + geom_step(aes(y = up, color = group), lty = lty.ci) +
geom_step(aes(y = low, color = group), lty = lty.ci)
} else{pl +  geom_step(aes(y = up, lty = group), col = surv.col) +
geom_step(aes(y = low,lty = group), col = surv.col)}
} else {pl}
pl <- if(plot.cens == T & length(dat.cens) > 0){
pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
col = cens.col)
} else if (plot.cens == T & length(dat.cens) == 0){
stop ('There are no censored observations')
} else(pl)
pl <- if(back.white == T) {pl + theme_bw()
} else (pl)
pl
}
pl <- if(strata == 1) {ggsurv.s(s, CI , plot.cens, surv.col ,
cens.col, lty.est, lty.ci,
cens.shape, back.white, xlab,
ylab, main)
} else {ggsurv.m(s, CI, plot.cens, surv.col ,
cens.col, lty.est, lty.ci,
cens.shape, back.white, xlab,
ylab, main)}
pl
}
#
##
### Load and edit data
##
#
transitioned <- read.csv(file="transitioned.csv", header=T)
censored <- read.csv(file="censored.csv", header=T)
full <- rbind(transitioned, censored)
full$Partial_code_ff <- as.numeric(full$Partial_code_ff)    # Coerce the event variable to numeric
# Need to remove BMI stuff
bmiQuants <- quantile(full$BMInew, seq(0, 1, 0.25))
full$bmiCat <- cut(bmiQuants, unique(bmiQuants), include.lowest=TRUE)
ggsurv(alcKM, plot.cens = F) +
ggtitle("KM Estimates Statified by Alcohol Consumption")
survObject <- Surv(full$DURATION, event=full$Partial_code_ff)
survObject <- Surv(full$DURATION, event=full$Partial_code_ff)
alcKM <- survfit(survObject ~ full$alcohol)
ggsurv(alcKM, plot.cens = F) +
ggtitle("KM Estimates Statified by Alcohol Consumption")
ggsurv(alcKM, plot.cens = F) +
ggtitle("KM Estimates Statified by Alcohol Consumption") +
guides(fill=guide_legend(title=""))
ggsurv(alcKM, plot.cens = F) +
ggtitle("KM Estimates Statified by Alcohol Consumption") +
guides(fill=guide_legend(title=" asd"))
ggsurv(alcKM, plot.cens = F) +
ggtitle("KM Estimates Statified by Alcohol Consumption") +
scale_fill_discrete(name = "New Legend Title")
ggsurv(alcKM, plot.cens = F) +
ggtitle("KM Estimates Statified by Alcohol Consumption") +
scale_fill_discrete(name = "New Legend Title")
